#!/bin/bash

# Function to install npm packages
install_npm_packages() {
    if ! npm install; then
        exit 1
    fi
    npm install axios@latest
}

# Function to compile both project and test files into dist directory
compile_all() {
    tsc
    tsc -p tsconfig.test.json
}

# Function to set up environment files
setup_environment_files() {
    if [ ! -f .env ]; then
        touch .env
        echo "GITHUB_TOKEN=" > .env
        echo "LOG_LEVEL=" >> .env
        echo "LOG_FILE=" >> .env
    fi
}

check_environment_variables() {
    if [ -f .env ]; then
        if ! grep -q "GITHUB_TOKEN=" .env || [ -z "$(grep 'GITHUB_TOKEN' .env | cut -d '=' -f2 | tr -d '[:space:]')" ]; then
            exit 1
        fi

        if ! grep -q "LOG_LEVEL=" .env || [ -z "$(grep 'LOG_LEVEL' .env | cut -d '=' -f2 | tr -d '[:space:]')" ]; then
            exit 1
        fi

        if ! grep -q "LOG_FILE=" .env || [ -z "$(grep 'LOG_FILE' .env | cut -d '=' -f2 | tr -d '[:space:]')" ]; then
            :
        fi
    else
        exit 1
    fi
}

# Function to delete npm packages and related files
delete_npm_packages() {
    find . -type f -name "*.js" -exec rm -f {} +
    find dist -mindepth 1 -delete
    rm -rf node_modules
}

# Function to process the URL_FILE
process_url_file() {
    local url_file="$1"
    # Add your URL_FILE processing tasks here
}

# Function to run the project
run_project() {
    check_environment_variables
    if [ -f "dist/index.js" ]; then
        node dist/index.js "$1"
    else
        if compile_all; then
            node dist/index.js "$1"
        else
            exit 1
        fi
    fi
}

# Function to run tests
run_tests() {
    npm test
}

# Main script execution

if [ "$#" -ne 1 ]; then
    exit 1
fi

if [ "$1" = "install" ]; then
    install_npm_packages
    setup_environment_files
    compile_all
elif [ "$1" = "test" ]; then
    run_tests
else
    if [ -f "$1" ]; then
        process_url_file "$1"
        run_project "$1"
    else
        exit 1
    fi
fi

exit 0